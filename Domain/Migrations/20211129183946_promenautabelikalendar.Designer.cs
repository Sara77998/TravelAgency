// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Domain.Migrations
{
    [DbContext(typeof(TravelAgencyContext))]
    [Migration("20211129183946_promenautabelikalendar")]
    partial class promenautabelikalendar
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.Property<int>("AgentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TuristickaAgencijaID")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentID");

                    b.HasIndex("TuristickaAgencijaID");

                    b.ToTable("Agenti");
                });

            modelBuilder.Entity("Domain.Gost", b =>
                {
                    b.Property<int>("GostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DatumRodjenja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pasos")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GostID");

                    b.ToTable("Gosti");
                });

            modelBuilder.Entity("Domain.Hotel", b =>
                {
                    b.Property<int>("HotelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrojZvezdinca")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zemlja")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelID");

                    b.ToTable("Hoteli");
                });

            modelBuilder.Entity("Domain.Kalendar", b =>
                {
                    b.Property<int>("KalendarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Boja")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CeoDan")
                        .HasColumnType("bit");

                    b.Property<string>("Detalji")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dogadjaj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Kraj")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Pocetak")
                        .HasColumnType("datetime2");

                    b.HasKey("KalendarID");

                    b.ToTable("Kalendar");
                });

            modelBuilder.Entity("Domain.Rezervacija", b =>
                {
                    b.Property<int>("RezervacijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AgentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumDo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumOd")
                        .HasColumnType("datetime2");

                    b.Property<int>("SobaID")
                        .HasColumnType("int");

                    b.HasKey("RezervacijaID");

                    b.HasIndex("AgentID");

                    b.HasIndex("SobaID");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("Domain.Soba", b =>
                {
                    b.Property<int>("SobaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrojSobe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HotelID")
                        .HasColumnType("int");

                    b.Property<string>("TipSobe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Zauzeta")
                        .HasColumnType("bit");

                    b.HasKey("SobaID");

                    b.HasIndex("HotelID");

                    b.ToTable("Sobe");
                });

            modelBuilder.Entity("Domain.TuristickaAgencija", b =>
                {
                    b.Property<int>("TuristickaAgencijaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TuristickaAgencijaID");

                    b.ToTable("TuristickeAgencije");

                    b.HasData(
                        new
                        {
                            TuristickaAgencijaID = 1,
                            Naziv = "Sabra",
                            Telefon = "068172121"
                        });
                });

            modelBuilder.Entity("Domain.Agent", b =>
                {
                    b.HasOne("Domain.TuristickaAgencija", "TuristickaAgencija")
                        .WithMany()
                        .HasForeignKey("TuristickaAgencijaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TuristickaAgencija");
                });

            modelBuilder.Entity("Domain.Rezervacija", b =>
                {
                    b.HasOne("Domain.Agent", "Agent")
                        .WithMany()
                        .HasForeignKey("AgentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Soba", "Soba")
                        .WithMany()
                        .HasForeignKey("SobaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Domain.StavkaRezervacije", "StavkeRezervacije", b1 =>
                        {
                            b1.Property<int>("RB")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .UseIdentityColumn();

                            b1.Property<int>("RezervacijaID")
                                .HasColumnType("int");

                            b1.Property<int>("GostID")
                                .HasColumnType("int");

                            b1.Property<int>("StavkaRezervacijeID")
                                .HasColumnType("int");

                            b1.HasKey("RB", "RezervacijaID");

                            b1.HasIndex("GostID");

                            b1.HasIndex("RezervacijaID");

                            b1.ToTable("StavkeRezervacije");

                            b1.HasOne("Domain.Gost", "Gost")
                                .WithMany()
                                .HasForeignKey("GostID")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner("Rezervacija")
                                .HasForeignKey("RezervacijaID");

                            b1.Navigation("Gost");

                            b1.Navigation("Rezervacija");
                        });

                    b.Navigation("Agent");

                    b.Navigation("Soba");

                    b.Navigation("StavkeRezervacije");
                });

            modelBuilder.Entity("Domain.Soba", b =>
                {
                    b.HasOne("Domain.Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hotel");
                });
#pragma warning restore 612, 618
        }
    }
}
